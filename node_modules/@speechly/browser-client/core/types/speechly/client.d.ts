import { ClientOptions, StateChangeCallback, SegmentChangeCallback, TentativeTranscriptCallback, TranscriptCallback, TentativeEntitiesCallback, EntityCallback, IntentCallback } from './types';
declare global {
    interface Window {
        SpeechlyClient: Client;
    }
}
/**
 * A client for Speechly Spoken Language Understanding (SLU) API. The client handles initializing the microphone
 * and websocket connection to Speechly API, passing control events and audio stream to the API, reading the responses
 * and dispatching them, as well as providing a high-level API for interacting with so-called speech segments.
 * @public
 */
export declare class Client {
    private listening;
    private readonly debug;
    private readonly logSegments;
    private readonly projectId?;
    private readonly appId?;
    private readonly storage;
    private readonly microphone;
    private readonly apiClient;
    private readonly loginUrl;
    private readonly isWebkit;
    private readonly sampleRate;
    private readonly nativeResamplingSupported;
    private readonly autoGainControl;
    private readonly activeContexts;
    private readonly maxReconnectAttemptCount;
    private readonly contextStopDelay;
    private connectAttempt;
    private connectPromise;
    private initializePromise;
    private listeningPromise;
    private readonly deviceId;
    private authToken?;
    private audioContext?;
    private state;
    private readonly apiUrl;
    private stateChangeCb;
    private segmentChangeCb;
    private tentativeTranscriptCb;
    private tentativeEntitiesCb;
    private tentativeIntentCb;
    private transcriptCb;
    private entityCb;
    private intentCb;
    constructor(options: ClientOptions);
    private getReconnectDelayMs;
    private sleep;
    /**
     * @returns true if startContext is called and expecting stopContext next
     */
    isListening(): boolean;
    /**
     * Connect to Speechly backend.
     * This function will be called by initialize if not manually called earlier.
     * Calling connect() immediately after constructor and setting callbacks allows
     * prewarming the connection, resulting in less noticeable waits for the user.
     */
    connect(): Promise<void>;
    /**
     * Initializes the client, by initializing the microphone and establishing connection to the API.
     *
     * This function HAS to be invoked by a user by e.g. binding it to a button press,
     * or some other user-performed action.
     *
     * If this function is invoked without a user interaction,
     * the microphone functionality will not work due to security restrictions by the browser.
     */
    initialize(): Promise<void>;
    /**
     * Closes the client by closing the API connection and disabling the microphone.
     */
    close(): Promise<void>;
    private hasUnrecoverableError;
    private queueTask;
    /**
     * Starts a new SLU context by sending a start context event to the API and unmuting the microphone.
     * @param cb - the callback which is invoked when the context start was acknowledged by the API.
     */
    startContext(appId?: string): Promise<string>;
    /**
     * Stops current SLU context by sending a stop context event to the API and muting the microphone
     * delayed by contextStopDelay = 250 ms
     */
    stopContext(): Promise<string>;
    /**
     * Stops current context and immediately starts a new SLU context
     * by sending a start context event to the API and unmuting the microphone.
     * @param appId - unique identifier of an app in the dashboard.
     */
    switchContext(appId: string): Promise<void>;
    /**
     * Adds a listener for client state change events.
     * @param cb - the callback to invoke on state change events.
     */
    onStateChange(cb: StateChangeCallback): void;
    /**
     * Adds a listener for current segment change events.
     * @param cb - the callback to invoke on segment change events.
     */
    onSegmentChange(cb: SegmentChangeCallback): void;
    /**
     * Adds a listener for tentative transcript responses from the API.
     * @param cb - the callback to invoke on a tentative transcript response.
     */
    onTentativeTranscript(cb: TentativeTranscriptCallback): void;
    /**
     * Adds a listener for transcript responses from the API.
     * @param cb - the callback to invoke on a transcript response.
     */
    onTranscript(cb: TranscriptCallback): void;
    /**
     * Adds a listener for tentative entities responses from the API.
     * @param cb - the callback to invoke on a tentative entities response.
     */
    onTentativeEntities(cb: TentativeEntitiesCallback): void;
    /**
     * Adds a listener for entity responses from the API.
     * @param cb - the callback to invoke on an entity response.
     */
    onEntity(cb: EntityCallback): void;
    /**
     * Adds a listener for tentative intent responses from the API.
     * @param cb - the callback to invoke on a tentative intent response.
     */
    onTentativeIntent(cb: IntentCallback): void;
    /**
     * Adds a listener for intent responses from the API.
     * @param cb - the callback to invoke on an intent response.
     */
    onIntent(cb: IntentCallback): void;
    private readonly handleWebsocketResponse;
    private readonly handleWebsocketClosure;
    private reconnect;
    private advanceState;
    private setState;
    /**
     * print statistics to console
     */
    printStats(): void;
    sendAudioData(audioData: ArrayBuffer): void;
}
